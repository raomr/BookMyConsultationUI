{"ast":null,"code":"import axios from \"axios\";\nexport const loginApiCall = async (email, password) => {\n  const encoded = Buffer.from(email + ':' + password).toString('base64');\n  try {\n    const response = await axios.post(\"http://localhost:8080/auth/login\", {}, {\n      headers: {\n        'Authorization': 'Basic ' + encoded\n      }\n    });\n    localStorage.setItem('token', response.data.accessToken);\n    console.log('Login successful:', localStorage.getItem('token'));\n    localStorage.setItem('isLoggedIn', true);\n  } catch (error) {\n    throw new Error('Login failed');\n  }\n};\nexport const registerApiCall = async (email, password, firstName, lastName, mobile) => {\n  try {\n    const registerResponse = await axios.post(\"http://localhost:8080/users/register\", {\n      \"firstName\": firstName,\n      \"lastName\": lastName,\n      \"mobile\": mobile,\n      \"password\": password,\n      \"emailId\": email\n    }, {});\n    console.log(\"Register salt \" + registerResponse.data.salt);\n  } catch (error) {\n    throw new Error('Registration failed');\n  }\n};\nexport const fetchDoctors = async speciality => {\n  try {\n    const params = {};\n    if (speciality) {\n      params.speciality = speciality;\n    }\n    const response = await axios.get('http://localhost:8080/doctors', {\n      params\n    });\n    console.log(\"Doctor list call done\");\n    return response;\n  } catch (error) {\n    console.error('Error fetching doctors:', error);\n    throw new Error('Error fetching doctors');\n  }\n};\nexport const fetchSpecialities = async () => {\n  try {\n    const response = await axios.get('http://localhost:8080/doctors/speciality');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching specialities:', error);\n    throw new Error('Error fetching specialities');\n  }\n};","map":{"version":3,"names":["axios","loginApiCall","email","password","encoded","Buffer","from","toString","response","post","headers","localStorage","setItem","data","accessToken","console","log","getItem","error","Error","registerApiCall","firstName","lastName","mobile","registerResponse","salt","fetchDoctors","speciality","params","get","fetchSpecialities"],"sources":["C:/Users/dell/OneDrive/Documents/UpgradCapstone/BookMyConsultationUI/src/util/fetch.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const loginApiCall = async (email, password) => {\r\n    const encoded = Buffer.from(email + ':' + password).toString('base64');\r\n    try {\r\n        const response = await axios.post(\"http://localhost:8080/auth/login\", {}, {\r\n            headers: {\r\n                'Authorization': 'Basic ' + encoded\r\n            }\r\n        });\r\n        localStorage.setItem('token', response.data.accessToken);\r\n        console.log('Login successful:', localStorage.getItem('token'));\r\n        localStorage.setItem('isLoggedIn', true);\r\n    } catch (error) {\r\n        throw new Error('Login failed');\r\n    }\r\n}\r\n\r\nexport const registerApiCall = async (email, password, firstName, lastName, mobile) => {\r\n    try {\r\n        const registerResponse = await axios.post(\"http://localhost:8080/users/register\", {\r\n            \"firstName\": firstName,\r\n            \"lastName\": lastName,\r\n            \"mobile\": mobile,\r\n            \"password\": password,\r\n            \"emailId\": email\r\n        }, {});\r\n        console.log(\"Register salt \" + registerResponse.data.salt);\r\n    } catch (error) {\r\n        throw new Error('Registration failed');\r\n    }\r\n}\r\n\r\nexport const fetchDoctors = async (speciality) => {\r\n    try {\r\n        const params = {};\r\n        if (speciality) {\r\n            params.speciality = speciality;\r\n        }\r\n        const response = await axios.get('http://localhost:8080/doctors', { params });\r\n        console.log(\"Doctor list call done\");\r\n        return response;\r\n    } catch (error) {\r\n        console.error('Error fetching doctors:', error);\r\n        throw new Error('Error fetching doctors');\r\n    }\r\n};\r\n\r\nexport const fetchSpecialities = async () => {\r\n    try {\r\n        const response = await axios.get('http://localhost:8080/doctors/speciality');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching specialities:', error);\r\n        throw new Error('Error fetching specialities');\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACnD,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACJ,KAAK,GAAG,GAAG,GAAGC,QAAQ,CAAC,CAACI,QAAQ,CAAC,QAAQ,CAAC;EACtE,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,kCAAkC,EAAE,CAAC,CAAC,EAAE;MACtEC,OAAO,EAAE;QACL,eAAe,EAAE,QAAQ,GAAGN;MAChC;IACJ,CAAC,CAAC;IACFO,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAAC;IACxDC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEL,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC,CAAC;IAC/DN,YAAY,CAACC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC;EAC5C,CAAC,CAAC,OAAOM,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EACnC;AACJ,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOlB,KAAK,EAAEC,QAAQ,EAAEkB,SAAS,EAAEC,QAAQ,EAAEC,MAAM,KAAK;EACnF,IAAI;IACA,MAAMC,gBAAgB,GAAG,MAAMxB,KAAK,CAACS,IAAI,CAAC,sCAAsC,EAAE;MAC9E,WAAW,EAAEY,SAAS;MACtB,UAAU,EAAEC,QAAQ;MACpB,QAAQ,EAAEC,MAAM;MAChB,UAAU,EAAEpB,QAAQ;MACpB,SAAS,EAAED;IACf,CAAC,EAAE,CAAC,CAAC,CAAC;IACNa,OAAO,CAACC,GAAG,CAAC,gBAAgB,GAAGQ,gBAAgB,CAACX,IAAI,CAACY,IAAI,CAAC;EAC9D,CAAC,CAAC,OAAOP,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EAC1C;AACJ,CAAC;AAED,OAAO,MAAMO,YAAY,GAAG,MAAOC,UAAU,IAAK;EAC9C,IAAI;IACA,MAAMC,MAAM,GAAG,CAAC,CAAC;IACjB,IAAID,UAAU,EAAE;MACZC,MAAM,CAACD,UAAU,GAAGA,UAAU;IAClC;IACA,MAAMnB,QAAQ,GAAG,MAAMR,KAAK,CAAC6B,GAAG,CAAC,+BAA+B,EAAE;MAAED;IAAO,CAAC,CAAC;IAC7Eb,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC,OAAOR,QAAQ;EACnB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC7C;AACJ,CAAC;AAED,OAAO,MAAMW,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACA,MAAMtB,QAAQ,GAAG,MAAMR,KAAK,CAAC6B,GAAG,CAAC,0CAA0C,CAAC;IAC5E,OAAOrB,QAAQ,CAACK,IAAI;EACxB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAClD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}